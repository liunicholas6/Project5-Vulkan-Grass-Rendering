#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

#define ORIENTATION_CULL
#define FRUSTUM_CULL
#define DISTANCE_CULL

#ifdef DISTANCE_CULL
#define MAX_DIST 50
#endif

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

const vec4 D = vec4(0, -1, 0, 1);

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

const float TOLERANCE = 0.1;
bool inFrustum(vec3 point) {
    vec4 p = camera.proj * camera.view * vec4(point, 1);
    return inBounds(p.x, p.w + TOLERANCE) && inBounds(p.x, p.w + TOLERANCE) && p.z > 0 && p.z < p.w;
}

float rand(vec3 co){
    return fract(sin(dot(co, vec3(12.9898, 78.233, 92.7345))) * 43758.5453);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

    Blade blade = inputBlades[gl_GlobalInvocationID.x];
    vec3 v0 = blade.v0.xyz;
    vec3 v1 = blade.v1.xyz;
    vec3 v2 = blade.v2.xyz;
    vec3 up = blade.up.xyz;
    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    vec3 t1 = vec3(cos(orientation), 0, sin(orientation)); // tangent
    vec3 f = normalize(cross(up, t1)); // front direction

    vec3 gE = D.xyz * D.w; // environmental gravity
    vec3 gF = 0.25 * D.w * f; // front gravity
    vec3 gravity = gE + gF; // total gravity force

    vec3 iv2 = v0 + up * height; // initial v2
    vec3 recovery = (iv2 - v2) * stiffness; // recovery force

    vec3 wi = 5 * sin(length(v0) + totalTime) * normalize(v0); // wind strength: TODO: use more interesting value than constant

    float fd = 1 - abs(dot(normalize(wi), normalize(v2 - v0))); // directional alignment
    float fr = dot(v2 - v0, up) / height; // height ratio
    vec3 wind = fd * fr * wi; // wind force

    vec3 translation = gravity + recovery + wind;
    v2 += translation * deltaTime; // initial displacement
    v2 -= up * min(dot(up, v2 - v0), 0); // state validation

    // Initial placement of v1
    vec3 v20 = v2 - v0;
    float l_proj = length(v20 - up * dot(v20, up));
    v1 = v0 + height * up * max(1 - l_proj / height, 0.05 * max(l_proj / height, 1));

    // Length correction
    vec3 v10 = v1 - v0;
    vec3 v21 = v2 - v1;
    float L0 = length(v20);
    float L1 = 0.5 * length(v10) * length(v21);
    float L = 0.5 * (L0 + L1);
    float r = height / L;
    v1 = v0 + r * v10;
    v2 = v1 + r * v21;

    inputBlades[gl_GlobalInvocationID.x].v1.xyz = v1;
    inputBlades[gl_GlobalInvocationID.x].v2.xyz = v2;

    #ifdef ORIENTATION_CULL
    vec3 grassDir = normalize(vec3(camera.view * vec4(t1, 0)));
    vec3 camDir = normalize(vec3(camera.view * vec4(v0, 1)));
    if (abs(dot(grassDir, camDir)) > 0.90) {
        return;
    }
    #endif

    #ifdef FRUSTUM_CULL
    if (!(inFrustum(v0) || inFrustum(0.25 * v0 + 0.5 * v1 + 0.25 * v2) || inFrustum(v2))) {
        return;
    }
    #endif

    #ifdef DISTANCE_CULL
    float distance = -(camera.view * vec4(v0, 1)).z;
    float dist_ratio = distance / MAX_DIST;
    float cullProb = sqrt(dist_ratio);
    if (rand(v0) < cullProb) {
        return;
    }
    #endif

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades[gl_GlobalInvocationID.x];
}
